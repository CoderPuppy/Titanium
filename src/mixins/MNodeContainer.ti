abstract class MNodeContainer {
    nodes = {}
}

--[[
    @instance
    @desc Adds a node to the object. This node will have its object and parent (this) set
    @param <Instance 'Node' - node>
    @return 'param1 (node)'
]]
function MNodeContainer:addNode( node )
    if not Titanium.typeOf( node, "Node", true ) then
        return error( "Cannot add '"..tostring( node ).." as Node on '"..tostring( self ).."'" )
    end

    node.parent = self
    if Titanium.typeOf( self, "Application", true ) then
        node.application = self
    else
        if Titanium.typeOf( self.application, "Application", true ) then
            node.application = self.application
        end
    end

    self.changed = true

    table.insert( self.nodes, node )
    node:updateProperties()

    if node.focused then node:focus() end
    return node
end

--[[
    @instance
    @desc Removes a node matching the name* provided OR, if a node object is passed the actual node. Returns false if not found or (true and node)
    @param <Instance 'Node'/string name - target>
    @return <boolean - success>, [node - removedNode**]

    *Note: In order for the node to be removed its 'name' field must match the 'name' parameter.
    **Note: Removed node will only be returned if a node was removed (and thus success 'true')
]]
function MNodeContainer:removeNode( target )
    local searchName = type( target ) == "string"

    if not searchName and not Titanium.typeOf( target, "Node", true ) then
        return error( "Cannot perform search for node using target '"..tostring( target ).."' to remove." )
    end

    local nodes, node, nodeName = self.nodes, nil
    for i = 1, #nodes do
        node = nodes[ i ]

        if ( searchName and node.id == target ) or ( not searchName and node == target ) then
            node.parent = nil
            node.application = nil

            if self.focusedNode == node then
                node.focused = false
            end

            self.changed = true

            table.remove( nodes, i )
            return true, node
        end
    end

    return false
end

--[[
    @instance
    @desc Searches for (and returns) a node with the 'id' specified. If 'recursive' is true and a node that contains others is found, the node will also be searched.
    @param <string - id>, [boolean - recursive]
    @return [Node Instance - node]
]]
function MNodeContainer:getNode( id, recursive )
    local nodes, node = self.nodes
    for i = 1, #nodes do
        node = nodes[ i ]
        if node.id == id then
            return node
        elseif recursive and node.nodes then
            local r = node:getNode( id, true )
            if r then return r end
        end
    end
end

--[[
    @instance
    @desc Returns a 'NodeQuery' instance containing the nodes that matched the query and methods to manipulate
    @param <string - query>
    @return <NodeQuery Instance - Query Result>
]]
function MNodeContainer:query( query )
    return NodeQuery( self, query )
end
