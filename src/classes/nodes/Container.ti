class Container extends Node mixin MNodeContainer

--[[
    @instance
    @desc Constructs the Container node with the value passed. If a nodes table is passed each entry inside of it will be added to the container as a node
    @param [number - X], [number - Y], [number - width], [number - height], [table - nodes]
]]
function Container:__init__( ... )
    self:resolve( ... )

    local toset = self.nodes
    self.nodes = {}

    if type( toset ) == "table" then
        for i = 1, #toset do
            self:addNode( toset[ i ] )
        end
    end

    self:super()
end

--[[
    @instance
    @desc Returns true if the node given is visible inside of the container
    @param <Node - node>, [number - width], [number - height]
    @return <boolean - visible>
]]
function Container:isNodeInBounds( node, width, height )
    local left, top = node.X, node.Y
    local right, bottom = left + node.width, top + node.height

    local width, height = width or self.width, height or self.height
    return not ( right < 1 or left > width or top > height or bottom < 1 )
end

--[[
    @instance
    @desc Draws contained nodes to container canvas. Nodes are only drawn if they are visible inside the container
    @param [boolean - force]
]]
function Container:draw( force )
    if self.changed or force or true then
        local raw = self.raw
        local canvas = raw.canvas

        local width, height = self.width, self.height
        local nodes, node = raw.nodes

        canvas:clear()
        for i = 1, #nodes do
            node = nodes[ i ]

            if self:isNodeInBounds( node, width, height ) then
                node:draw( force )

                node.canvas:drawTo( canvas, node.X, node.Y )
            end
        end

        raw.changed = false
    end
end

configureConstructor({
    orderedArguments = { "X", "Y", "width", "height", "nodes", "backgroundColour" },
    argumentTypes = {
        nodes = "table"
    }
}, true)
