class QueryParser extends Parser

function QueryParser:__init__( queryString )
    self:super( QueryLexer( queryString ).tokens )
end

function QueryParser:parse()
    local allQueries, currentQuery = {}, {}

    local function isCurrent()
        return (currentQuery.classes and #currentQuery.classes > 0) or currentQuery.type or currentQuery.type
    end

    local token = self:stepForward()
    while token do
        if token.type == "QUERY_TYPE" then
            if currentQuery.type then
                self:throw("Duplicate query 'type'. Tried to set type '"..token.value.."' when already set to '"..currentQuery.type.."'")
            end

            currentQuery.type = token.value
        elseif token.type == "QUERY_ID" then
            if currentQuery.id then
                self:throw("Duplicate query 'id'. Tried to set type '"..token.value.."' when already set to '"..currentQuery.type.."'")
            end

            currentQuery.id = token.value
        elseif token.type == "QUERY_CLASS" then
            if not currentQuery.classes then
                currentQuery.classes = {}
            end

            table.insert( currentQuery.classes, token.value )
        elseif token.type == "QUERY_SEPERATOR" then
            if isCurrent() then
                allQueries[ #allQueries + 1 ] = currentQuery
                currentQuery = {}
            else
                self:throw "Tried to seperate query, no query (empty) found on left of seperator."
            end
        elseif token.type == "QUERY_COND_OPEN" then
            --TODO: Conditions
        else
            self:throw("Unexpected '"..token.type.."'")
        end

        token = self:stepForward()
    end

    if isCurrent() then
        allQueries[ #allQueries + 1 ] = currentQuery
    end

    self.query = allQueries
end
