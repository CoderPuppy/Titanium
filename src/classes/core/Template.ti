--[[
    A template can be used to quickly define settings on a target.

    The template can contain properties, when the 'applyTo' is called the defined properties will be set on the target.
]]

class Template {
    rules = {}
}

--[[
    @constructor
    @desc Constructs the template with the rules provided
    @param <table - rules>
]]
function Template:__init__( rules )
    if rules then
        self.rules = type( rules ) == "table" and rules or error "Failed to initialise Template. Invalid rules object passed"
    end
end

--[[
    @instance
    @desc Adds a rule to the template.
    @param <string - rule>, <any - value>
]]
function Template:addToTemplate( rule, value )
    self.rules[ rule ] = value
end

--[[
    @instance
    @desc Removes a rule to the template
    @param <string - rule>
]]
function Template:removeFromTemplate( rule )
    self.rules[ rule ] = nil
end

--[[
    @instance
    @desc Applys the defined rules on the 'target'
    @param <Instance - target>
]]
function Template:applyTo( target, weak )
    for rule, value in pairs( self.rules ) do
        if not weak or ( weak and target[ rule ] == nil ) then
            target[ rule ] = value
        end
    end
end

--[[
    @instance
    @desc Merges the rules from the target template to this template 'self'. If weak is true the rules will not be overwritten
    @param <TemplateInstance - template>, [boolean - weak]
]]
function Template:merge( template, weak )
    if not Titanium.typeOf( template, "Template", true ) then return error "Cannot merge target template to current template. Invalid template" end

    local cRules, tRules = self.rules, template.rules
    for key, value in pairs( tRules ) do
        if not weak or ( weak and cRules[ key ] == nil ) then
            cRules[ key ] = value
        end
    end
end
